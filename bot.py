
# =============================
# Telegram Earning Bot (Full)
# Includes Admin Panel, Tasks from MongoDB, Balance, Refer
# =============================

import os
import time
from datetime import datetime
import telebot
from telebot import types
from pymongo import MongoClient
from bson.objectid import ObjectId

# === CONFIG ===
TOKEN = os.getenv("TOKEN") or "7869962843:AAGYUWT0o0_E-ysKFfmRGWqGQozcOPb3FYg"
CHANNEL = os.getenv("CHANNEL") or "@takakeepercom"
MONGO_URI = os.getenv("MONGO_URI") or "mongodb+srv://takakeeper:sr@@http://95850270@takakeeper.96qzkoi.mongodb.net/?retryWrites=true&w=majority&appName=TakaKeeper"
ADMIN_ID = 7279163908  # <-- Replace with your own Telegram ID

bot = telebot.TeleBot(TOKEN)
client = MongoClient(MONGO_URI)
db = client['earnBotDB']
users = db['users']
task_logs = db['task_logs']
tasks = db['tasks']

# === START COMMAND ===
@bot.message_handler(commands=['start'])
def start_handler(m):
    uid = m.from_user.id
    if not users.find_one({'user_id': uid}):
        users.insert_one({'user_id': uid, 'balance': 0, 'refer': None})
    member = bot.get_chat_member(CHANNEL, uid)
    if member.status in ['member', 'administrator', 'creator']:
        show_menu(uid)
    else:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("‚úÖ Join Done", callback_data='check_join'))
        bot.send_message(uid, f"üîî ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ Join ‡¶ï‡¶∞‡ßÅ‡¶®:
{CHANNEL}", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'check_join')
def check_join_cb(c):
    member = bot.get_chat_member(CHANNEL, c.from_user.id)
    if member.status in ['member', 'administrator', 'creator']:
        bot.delete_message(c.message.chat.id, c.message.message_id)
        show_menu(c.from_user.id)
    else:
        bot.answer_callback_query(c.id, "‚ùå ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ Join ‡¶ï‡¶∞‡ßá‡¶®‡¶®‡¶ø!")

def show_menu(uid):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üéØ Task", "üí∞ Balance")
    kb.add("üë• Refer", "üì§ Withdraw")
    kb.add("üìû Support", "üì∏ Payment Proof")
    bot.send_message(uid, "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=kb)

# === BALANCE ===
@bot.message_handler(func=lambda m: m.text == "üí∞ Balance")
def check_balance(m):
    u = users.find_one({'user_id': m.from_user.id})
    bot.send_message(m.chat.id, f"üí∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {u['balance']} ‡¶ï‡ßü‡ßá‡¶®")

# === TASK SYSTEM ===
@bot.message_handler(func=lambda m: m.text == "üéØ Task")
def task_menu(m):
    ads = list(tasks.find())
    if not ads:
        return bot.send_message(m.chat.id, "üö´ ‡¶è‡¶ñ‡¶® ‡¶ï‡ßã‡¶®‡ßã Task ‡¶®‡ßá‡¶á!")
    kb = types.InlineKeyboardMarkup()
    for i, ad in enumerate(ads):
        kb.add(types.InlineKeyboardButton(f"‚ñ∂Ô∏è Watch Ad +{ad['reward']}", callback_data=f"watch_{ad['_id']}"))
    bot.send_message(m.chat.id, "ü™ô ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶è‡¶° ‡¶¶‡ßá‡¶ñ‡ßá ‡¶ï‡ßü‡ßá‡¶® ‡¶Ü‡ßü ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data.startswith('watch_'))
def watch_ad(c):
    ad_id = c.data.split('_')[1]
    ad = tasks.find_one({'_id': ObjectId(ad_id)})
    if not ad:
        return bot.answer_callback_query(c.id, "‚ùå Task ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø!")

    bot.send_message(c.from_user.id, f"‚ñ∂Ô∏è ‡¶è‡¶á ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®:
{ad['link']}")
    task_logs.insert_one({
        'user_id': c.from_user.id,
        'start': datetime.utcnow(),
        'ad_link': ad['link'],
        'reward': ad['reward'],
        'claimed': False
    })
    time.sleep(2)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ I watched full", callback_data="claim"))
    bot.send_message(c.from_user.id, "‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶∂‡ßá‡¶∑ ‡¶π‡¶≤‡ßá ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'claim')
def claim_reward(c):
    log = task_logs.find_one({'user_id': c.from_user.id, 'claimed': False})
    if not log:
        return bot.answer_callback_query(c.id, "‚ùå ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶®‡ßã Task ‡¶ï‡¶∞‡¶õ‡ßá‡¶® ‡¶®‡¶æ!")
    elapsed = (datetime.utcnow() - log['start']).total_seconds()
    if elapsed >= 30:
        users.update_one({'user_id': c.from_user.id}, {'$inc': {'balance': log['reward']}})
        task_logs.update_one({'_id': log['_id']}, {'$set': {'claimed': True}})
        bot.send_message(c.from_user.id, f"‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶™‡ßá‡ßü‡ßá‡¶õ‡ßá‡¶® {log['reward']} ‡¶ï‡ßü‡ßá‡¶®!")
    else:
        bot.answer_callback_query(c.id, f"‚è±Ô∏è {int(elapsed)} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶Ü‡¶∞‡¶ì ‡¶∏‡¶Æ‡ßü ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®!")

# === PLACEHOLDER MENU ===
@bot.message_handler(func=lambda m: m.text in ["üë• Refer", "üì§ Withdraw", "üìû Support", "üì∏ Payment Proof"])
def placeholders(m):
    bot.send_message(m.chat.id, "üîú ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá!")

# === ADMIN PANEL ===
@bot.message_handler(commands=['admin'])
def admin_panel(m):
    if m.from_user.id != ADMIN_ID: return
    text = (
        "üõ†Ô∏è Admin Panel Commands:
"
        "/users - Total users
"
        "/addcoins user_id amount
"
        "/balance user_id
"
        "/broadcast message
"
        "/addtask link reward"
    )
    bot.send_message(m.chat.id, text)

@bot.message_handler(commands=['users'])
def total_users(m):
    if m.from_user.id != ADMIN_ID: return
    count = users.count_documents({})
    bot.send_message(m.chat.id, f"üë• ‡¶Æ‡ßã‡¶ü ‡¶á‡¶â‡¶ú‡¶æ‡¶∞: {count}")

@bot.message_handler(commands=['addcoins'])
def add_coins(m):
    if m.from_user.id != ADMIN_ID: return
    try:
        _, uid, amt = m.text.split()
        uid = int(uid)
        amt = int(amt)
        users.update_one({'user_id': uid}, {'$inc': {'balance': amt}})
        bot.send_message(m.chat.id, f"‚úÖ {uid} ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá {amt} ‡¶ï‡ßü‡ßá‡¶® ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá")
    except:
        bot.send_message(m.chat.id, "‚ùå ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /addcoins user_id amount")

@bot.message_handler(commands=['balance'])
def check_user_balance(m):
    if m.from_user.id != ADMIN_ID: return
    try:
        _, uid = m.text.split()
        uid = int(uid)
        user = users.find_one({'user_id': uid})
        if user:
            bot.send_message(m.chat.id, f"üí∞ {uid} ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏: {user['balance']} ‡¶ï‡ßü‡ßá‡¶®")
        else:
            bot.send_message(m.chat.id, "‚ùå ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø")
    except:
        bot.send_message(m.chat.id, "‚ùå ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: /balance user_id")

@bot.message_handler(commands=['broadcast'])
def broadcast_message(m):
    if m.from_user.id != ADMIN_ID: return
    msg = m.text.replace("/broadcast ", "")
    sent = 0
    for u in users.find():
        try:
            bot.send_message(u['user_id'], msg)
            sent += 1
        except:
            continue
    bot.send_message(m.chat.id, f"‚úÖ {sent} ‡¶ú‡¶®‡¶ï‡ßá ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá")

@bot.message_handler(commands=['addtask'])
def add_task(m):
    if m.from_user.id != ADMIN_ID: return
    try:
        _, link, reward = m.text.split()
        reward = int(reward)
        tasks.insert_one({"link": link, "reward": reward})
        bot.send_message(m.chat.id, f"‚úÖ Task added:
üîó {link}
üí∞ Reward: {reward} ‡¶ï‡ßü‡ßá‡¶®")
    except:
        bot.send_message(m.chat.id, "‚ùå Format: /addtask link reward
‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
/addtask https://montag.com/ad/1 10")

# === RUN ===
print("ü§ñ Bot is running...")
bot.infinity_polling()
